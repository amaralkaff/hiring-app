Case Study Brief - Frontend Engineer 2025
Welcome to the Frontend Engineer Hiring Case Study for Rakamin. Your mission is to build a simplified Hiring Management
Web App that allows recruiters (Admin) to manage job vacancies and applicants (Job Seekers) to apply.
You will receive:
1. Design hand-off:
https://www.figma.com/design/pBRwbOB5TPRgLGovKhFNHm/Frontend-Engineer-Challenge?node-id=14&t=349HRhiJ9D0tdOJL-1
2. Product Requirement Document (PRD)
3. Example backend API responses (JSON)
This case study evaluates how well you can:
‚Ä¢ Translate design and PRD into clean, modular, and functional web apps.
‚Ä¢ Implement dynamic form validation based on backend configuration.
‚Ä¢ Create seamless, performant, and pixel-perfect user experiences.
‚Ä¢ Handle browser-level interactions (e.g., webcam, gestures).
‚Ä¢ Apply thoughtful UX and system design beyond the given brief.

Product Requirement Document (PRD)
1. Objective
Build a Hiring Management Web App with two user roles:
‚Ä¢ Admin (Recruiter)
‚Ä¢ Applicant (Job Seeker)
Each job post includes configurable application fields (mandatory, optional, or hidden) that must dynamically control the
frontend form‚Äôs behavior and validation.

2. User Roles & Key Features

üßë‚ÄçüíºAdmin (Recruiter)
1. Job List Page

‚Ä¢ Display all created job vacancies.
‚Ä¢ Each job shows:
‚ó¶ Title, Department, Status Badge (Active / Inactive / Draft), Salary Range, ‚ÄúManage Job‚Äù CTA.
‚Ä¢ Allow sorting and filtering by status or keyword.
‚Ä¢ Include a ‚Äú+ Create Job‚Äù button to open a modal.

2. Create Job Modal / Page
Admin can:
‚Ä¢ Input job metadata (title, description, department, etc.)
‚Ä¢ Configure Minimum Profile Information Required for applicants:
‚ó¶ Each field (Full Name, Email, LinkedIn, Domicile, etc.) has three states:
‚ñ™ Mandatory ‚Üí must be filled
‚ñ™ Optional ‚Üí may be skipped
‚ñ™ Off ‚Üí not shown on form
‚Ä¢ Save job configuration to backend (mocked or Supabase).
‚Ä¢ Validate all fields before submission.

3. Candidate Management Page
‚Ä¢ Table view of all applicants per job:
‚ó¶ Columns: Name, Email, Phone, Gender, LinkedIn, Domicile, Applied Date.
‚Ä¢ Each column is resizable (drag to adjust width) and reorderable (drag and drop to change the column order), allowing users
to customize their table view just like in modern spreadsheet applications.
‚Ä¢ Support sorting, filtering, and pagination.

üë©‚Äçüíª Applicant (Job Seeker)
1. Job List Page
‚Ä¢ Show all active job postings.
‚Ä¢ Each card includes job title, salary, and company.
‚Ä¢ Clicking opens the Job Detail page.

2. Apply Job Page
‚Ä¢ Form fields are dynamically rendered based on job configuration.
‚Ä¢ Validation logic must adapt to the backend‚Äôs definition:
‚ó¶ required: true ‚Üí mandatory
‚ó¶ required: false ‚Üí optional
‚ó¶ field missing ‚Üí hidden

3. Profile Picture via Hand Gesture
‚Ä¢ Implement webcam capture with gesture trigger:

1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ fingers).

‚ó¶ System detects 3 hand poses (

‚ó¶ After Pose 3 is detected ‚Üí photo captured automatically.
‚ó¶ User can preview & save.

4. Feedback State
‚Ä¢ After submitting:

‚úÖ Success message: ‚ÄúYour application has been submitted successfully.‚Äù
‚ó¶ ‚ùå Error state: Missing required fields highlighted.
‚ó¶

3. Backend / Data Integration
You may choose any backend approach:
‚Ä¢ Option A: Supabase / Firebase ‚Äî using CRUD operations for persistence.
‚Ä¢ Option B: Local JSON / IndexedDB / LocalStorage ‚Äî if focusing only on frontend logic.
Use the provided mock API responses as reference.

Example Backend Mock Responses
1. Job List
{
"data": [
{
"id": "job_20251001_0001",
"slug": "frontend-developer",
"title": "Frontend Developer",
"status": "active",
"salary_range": {
"min": 7000000,
"max": 8000000,
"currency": "IDR",
"display_text": "Rp7.000.000 - Rp8.000.000"
},
"list_card": {
"badge": "Active",
"started_on_text": "started on 1 Oct 2025",
"cta": "Manage Job"
}
}
]
}

2. Job Configuration (Admin)
{
"application_form": {
"sections": [
{
"title": "Minimum Profile Information Required",
"fields": [
{ "key": "full_name", "validation": { "required": true } },
{ "key": "photo_profile", "validation": { "required": true } },
{ "key": "gender", "validation": { "required": true } },
{ "key": "domicile", "validation": { "required": false } },
{ "key": "email", "validation": { "required": true } },
{ "key": "phone_number", "validation": { "required": true } },
{ "key": "linkedin_link", "validation": { "required": true } },
{ "key": "date_of_birth", "validation": { "required": false } }
]
}
]
}
}

3. Candidate List
{
"data": [
{
"id": "cand_20251008_0001",
"attributes": [
{ "key": "full_name", "label": "Full Name", "value": "Nadia Putri", "order": 1 },
{ "key": "email", "label": "Email", "value": "nadia.putri@example.com", "order": 2 },
{ "key": "phone", "label": "Phone", "value": "+62 812-1234-5678", "order": 3 },
{ "key": "domicile", "label": "Domicile", "value": "Jakarta", "order": 4 },
{ "key": "gender", "label": "Gender", "value": "Female", "order": 5 },
{ "key": "linkedin_link", "label": "LinkedIn", "value": "https://linkedin.com/in/nadiaputri",
"order": 6 }
]
}
]
}

Technical References
Area

Expectation

Framework

React / Next.js / Remix or any JS/TS
framework/library

Styling

TailwindCSS, CSS Modules, or styledcomponents or any enterprise grade framework

State

Redux / Zustand / Context API or any enterprise
grade

API

Supabase, Firebase, or mock JSON calls

Webcam

Any open source or your own lib

Testing

Playwright / Jest (optional but plus)

Deployment

Vercel / Netlify / Cloudflare Workers / or your own
preference

Design Fidelity

Pixel-perfect, responsive, enterprise-grade
execution

Evaluation Rubric
We assess your submission based on the following:
‚Ä¢ Functional Completeness ‚Äî all required features implemented correctly.
‚Ä¢ Code Quality & Architecture ‚Äî modular, maintainable, and clean.
‚Ä¢ UI Precision ‚Äî pixel-perfect to design, responsive, and accessible.
‚Ä¢ Dynamic Behavior ‚Äî validation logic truly adapts to backend config.
‚Ä¢ Error Handling ‚Äî graceful fallback for edge cases and invalid inputs.
‚Ä¢ Performance ‚Äî optimized re-renders, responsive UX.
‚Ä¢ Exploration & Initiative ‚Äî bonus points for spotting design flaws, adding meaningful enhancements, or improving UX
beyond brief.
‚Ä¢ Documentation ‚Äî clear setup, structure, and reasoning.

Design Expectation
Your deliverable must reach enterprise-grade quality, meaning:
‚Ä¢ Smooth transitions, proper spacing, and responsive breakpoints.
‚Ä¢ Consistent component styling and states (hover, focus, disabled).
‚Ä¢ Table resizing and modals behave predictably.
‚Ä¢ No broken flow on invalid input, empty state, or error scenario.
‚Ä¢ Visual alignment and typography must match provided mockups.
You are encouraged to:
‚Ä¢ Identify missing edge cases in the design.
‚Ä¢ Add UX/UI improvements (tooltips, status indicators, etc.).
‚Ä¢ Extend the app with meaningful enhancements, as long as main requirements remain fulfilled.

Submission Template
Please compile your submission into a single Case Study Report (PDF) following the structure below, and upload into Rakamin
Hiring Portal:

Candidate Information
‚Ä¢ Full Name:
‚Ä¢ Email Address:
1. Deployed URL: (e.g.,) https://yourproject.vercel.app‚Å†
2. Provide credential details if you implemented authentication and authorization.
3. GitHub Repository. Provide a direct link to your public GitHub repository containing all source files and readme.md
a. ‚ö†Ô∏èImportant: Do not use the word ‚ÄúRakamin‚Äù anywhere in your repository name, commits, or documentation. This is to
reduce plagiarism risk.
b. Example: github.com/username/hiring-platform
c. minimum readme.md structure:
i. Project Overview
ii. Tech Stack Used
iii. How to Run Locally
4. Key Features Implemented
5. Optional Enhancements You Added
6. Design or Logic Assumptions
7. Known Limitations (if any)

